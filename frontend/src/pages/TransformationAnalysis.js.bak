import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation, useParams } from 'react-router-dom';
import axios from 'axios';
import toast from 'react-hot-toast';
import { Editor } from '@monaco-editor/react';
import { 
  ArrowPathIcon, 
  CodeBracketIcon, 
  DocumentMagnifyingGlassIcon,
  CheckCircleIcon,
  PlayIcon,
  LightBulbIcon,
  KeyIcon,
  InformationCircleIcon 
} from '@heroicons/react/24/outline';
import PrebuiltTransformations from '../components/PrebuiltTransformations';

// Services imports 
import { 
  getDatasetById, 
  createTransformation, 
  getTransformationById, 
  updateTransformation 
} from '../services/datasetService';
import { 
  classifyTransformation, 
  generateTransformationFunction, 
  explainTransformation 
} from '../services/llmService';

const transformationTypes = [
  { id: 'String-based', name: 'String-based', description: 'Text operations like concatenation, substring, etc.' },
  { id: 'Numerical', name: 'Numerical', description: 'Mathematical operations and formulas' },
  { id: 'Algorithmic', name: 'Algorithmic', description: 'Complex logic and conditional transformations' },
  { id: 'General', name: 'General', description: 'Mixed or other types of transformations' },
];

const TransformationAnalysis = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { id } = useParams();
  
  // Get source and target IDs from URL params
  const searchParams = new URLSearchParams(location.search);
  const sourceId = searchParams.get('source');
  const targetId = searchParams.get('target');
  
  // State variables
  const [sourceDataset, setSourceDataset] = useState(null);
  const [targetDataset, setTargetDataset] = useState(null);
  const [transformation, setTransformation] = useState(null);
  const [transformationType, setTransformationType] = useState('');
  const [isTypeLoading, setIsTypeLoading] = useState(false);
  const [transformationFunction, setTransformationFunction] = useState('');
  const [isFunctionLoading, setIsFunctionLoading] = useState(false);
  const [explanation, setExplanation] = useState('');
  const [isExplanationLoading, setIsExplanationLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [samplePairs, setSamplePairs] = useState([]);
  const [llmProvider, setLlmProvider] = useState('gemini');

  // Check which LLM provider is being used
  useEffect(() => {
    const provider = localStorage.getItem('llm_provider') || 'gemini';
    setLlmProvider(provider);
  }, []);
  
  // Load data on component mount
  useEffect(() => {
    const loadData = async () => {
      try {
        // If transformation ID is provided, load existing transformation
        if (id) {
          const transformationData = await getTransformationById(id);
          setTransformation(transformationData);
          
          // Load related datasets
          const sourceData = await getDatasetById(transformationData.sourceTable);
          const targetData = await getDatasetById(transformationData.targetTable);
          
          setSourceDataset(sourceData);
          setTargetDataset(targetData);
          setTransformationType(transformationData.transformationType);
          setTransformationFunction(transformationData.transformationFunction || '');
          
          // Create sample pairs
          createSamplePairs(sourceData.sampleData, targetData.sampleData);
        } 
        // Otherwise load from source and target IDs
        else if (sourceId && targetId) {
          const sourceData = await getDatasetById(sourceId);
          const targetData = await getDatasetById(targetId);
          
          setSourceDataset(sourceData);
          setTargetDataset(targetData);
          
          // Create sample pairs
          createSamplePairs(sourceData.sampleData, targetData.sampleData);
          
          // Check if transformation already exists for these datasets
          try {
            // This API endpoint would need to be implemented on the backend
            const response = await axios.get(`/api/transformations/find?sourceId=${sourceId}&targetId=${targetId}`);
            if (response.data) {
              setTransformation(response.data);
              setTransformationType(response.data.transformationType);
              setTransformationFunction(response.data.transformationFunction || '');
            }
          } catch (error) {
            // No existing transformation found, which is fine
            console.log('No existing transformation found');
          }
        } else {
          // No IDs provided, redirect to upload page
          toast.error('Please upload or select datasets first');
          navigate('/upload');
        }
      } catch (error) {
        console.error('Error loading data:', error);
        toast.error('Failed to load data: ' + (error.response?.data?.message || error.message));
      }
    };
    
    loadData();
  }, [id, sourceId, targetId, navigate]);
  
  // Create sample pairs for display
  const createSamplePairs = (sourceSamples, targetSamples) => {
    const pairs = [];
    const maxSamples = Math.min(sourceSamples?.length || 0, targetSamples?.length || 0, 5);
    
    for (let i = 0; i < maxSamples; i++) {
      pairs.push({
        source: sourceSamples[i],
        target: targetSamples[i]
      });
    }
    
    setSamplePairs(pairs);
  };
  
  // Classify transformation type using LLM
  const handleClassifyTransformation = async () => {
    if (!sourceDataset || !targetDataset) {
      toast.error('Source and target datasets are required');
      return;
    }
    
    setIsTypeLoading(true);
    
    try {
      const response = await classifyTransformation(sourceDataset._id, targetDataset._id);
      setTransformationType(response.type);
      
      // Check if we used a fallback classification
      if (response.usedFallback) {
        toast.success(`Transformation classified as: ${response.type}`, {
          icon: '⚠️',
          description: 'Using fallback classification due to API rate limits'
        });
      } else {
        toast.success(`Transformation classified as: ${response.type}`);
      }
      
      // If we have a message from the server, log it
      if (response.message) {
        console.log('Server message:', response.message);
      }
    } catch (error) {
      console.error('Classification error:', error);
      
      // Handle different types of errors
      if (error.response?.status === 429) {
        toast.error('API rate limit exceeded. Please try again later.');
      } else {
        toast.error('Error classifying transformation: ' + (error.response?.data?.message || error.message));
      }
      
      // Set a default classification type for a better user experience
      setTransformationType('General');
    } finally {
      setIsTypeLoading(false);
    }
  };
  
  // Generate transformation function using LLM
  const handleGenerateFunction = async () => {
    if (!sourceDataset || !targetDataset || !transformationType) {
      toast.error('Source, target datasets and transformation type are required');
      return;
    }
    
    setIsFunctionLoading(true);
    
    try {
      const response = await generateTransformationFunction(
        sourceDataset._id,
        targetDataset._id,
        transformationType
      );
      
      // Set the transformation function
      setTransformationFunction(response.function);
      
      // Check if we used a fallback function
      if (response.usedFallback) {
        toast.success('Transformation function generated', {
          icon: '⚠️',
          description: 'Using fallback function due to API rate limits'
        });
      } else {
        toast.success('Transformation function generated successfully');
      }
      
      // If we have a message from the server, log it
      if (response.message) {
        console.log('Server message:', response.message);
      }
      
      // Also get an explanation
      handleExplainFunction(response.function);
    } catch (error) {
      console.error('Function generation error:', error);
      
      // Handle different types of errors
      if (error.response?.status === 429) {
        toast.error('API rate limit exceeded. Please try again later.');
        
        // Create a basic placeholder function to allow the user to continue
        const placeholderFunction = `
// Basic transformation function (placeholder due to API limits)
function transformRow(row) {
  // Create a new object for the transformed row
  const transformedRow = {};
  
  // Simply copy over all fields
  return {...row};
}

// Return the transformed row
return transformRow(row);
        `;
        
        setTransformationFunction(placeholderFunction);
        toast.info('A basic placeholder function has been created for you to edit');
      } else {
        toast.error('Error generating function: ' + (error.response?.data?.message || error.message));
      }
    } finally {
      setIsFunctionLoading(false);
    }
  };
  
  // Explain the transformation function using LLM
  const handleExplainFunction = async (functionText = null) => {
    const functionToExplain = functionText || transformationFunction;
    
    if (!functionToExplain) {
      toast.error('No transformation function to explain');
      return;
    }
    
    setIsExplanationLoading(true);
    
    try {
      const response = await explainTransformation(functionToExplain);
      setExplanation(response.explanation);
      
      // Check if we used a fallback explanation
      if (response.usedFallback) {
        toast.success('Explanation generated', {
          icon: '⚠️',
          description: 'Using basic explanation due to API rate limits'
        });
      } else {
        toast.success('Explanation generated successfully');
      }
      
      // If we have a message from the server, log it
      if (response.message) {
        console.log('Server message:', response.message);
      }
    } catch (error) {
      console.error('Explanation error:', error);
      
      // Handle different types of errors
      if (error.response?.status === 429) {
        toast.error('API rate limit exceeded. Please try again later.');
        
        // Create a basic explanation to allow the user to continue
        setExplanation(
          'This function transforms data from the source format to the target format. ' +
          'Examine the code to understand the specific transformations being applied.'
        );
      } else {
        toast.error('Error generating explanation: ' + (error.response?.data?.message || error.message));
      }
    } finally {
      setIsExplanationLoading(false);
    }
  };
  
  // Handle saving the transformation
  const handleSaveTransformation = async () => {
    if (!transformationType || !transformationFunction) {
      toast.error('Please classify the transformation and generate a function');
      return;
    }
    
    setSaving(true);
    
    try {
      let savedTransformation;
      
      // If transformation exists, update it
      if (transformation) {
        const updated = {
          transformationType,
          transformationFunction,
          status: 'ready'
        };
        
        savedTransformation = await updateTransformation(transformation._id, updated);
        toast.success('Transformation updated successfully');
      } 
      // Otherwise create a new one
      else {
        const newTransformation = {
          name: `${sourceDataset.name} to ${targetDataset.name}`,
          sourceTableId: sourceDataset._id,
          targetTableId: targetDataset._id,
          transformationType,
          transformationFunction,
          status: 'ready'
        };
        
        savedTransformation = await createTransformation(newTransformation);
        toast.success('Transformation saved successfully');
      }
      
      setTransformation(savedTransformation);
    } catch (error) {
      console.error('Error saving transformation:', error);
      toast.error('Error saving transformation: ' + (error.response?.data?.message || error.message));
    } finally {
      setSaving(false);
    }
  };
  
  // Handle applying the transformation
  const handleApplyTransformation = async () => {
    // If transformation exists and has an ID, navigate directly
    if (transformation && transformation._id) {
      console.log('Navigating to apply transformation with ID:', transformation._id);
      // Make sure transformation has a function
      if (!transformation.transformationFunction && transformationFunction) {
        // If we have a function in state but it's not saved to the transformation yet, save it first
        console.log('Transformation function exists in state but not in saved transformation, saving first...');
        await handleSaveTransformation();
      }
      // Navigate to the new apply transformation page with the transformation ID
      navigate(`/apply?id=${transformation._id}`);
    } else {
      // If no transformation exists yet, save first then navigate
      if (transformationType && transformationFunction) {
        console.log('Saving transformation before applying...');
        toast.loading('Saving transformation first...', { id: 'saving-before-apply' });
        try {
          await handleSaveTransformation();
          toast.success('Transformation saved, navigating to apply page', { id: 'saving-before-apply' });
          // Now the transformation should be set in state with an ID, navigate
          if (transformation && transformation._id) {
            navigate(`/apply?id=${transformation._id}`);
          }
        } catch (error) {
          console.error('Error saving before apply:', error);
          toast.error('Failed to save transformation', { id: 'saving-before-apply' });
        }
      } else {
        toast.error('Please classify the transformation and generate a function first');
      }
    }
  };
  
  // Editor change handler
  const handleEditorChange = (value) => {
    setTransformationFunction(value);
  };
  
  // Handle selecting a pre-built transformation
  const handleSelectPrebuiltTransformation = (code) => {
    setTransformationFunction(code);
    toast.success('Pre-built transformation applied! You can now save it.');
  };
  
  // Loading state
  if (!sourceDataset || !targetDataset) {
    return (
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8 text-center">
        <ArrowPathIcon className="h-12 w-12 mx-auto animate-spin text-primary-500" />
        <h2 className="mt-4 text-lg font-medium text-gray-900">Loading transformation data...</h2>
  }
};

  // Editor change handler
  const handleEditorChange = (value) => {
    setTransformationFunction(value);
  };

  // Handle selecting a pre-built transformation
  const handleSelectPrebuiltTransformation = (code) => {
    setTransformationFunction(code);
    toast.success('Pre-built transformation applied! You can now save it.');
  };

  // Loading state
  if (!sourceDataset || !targetDataset) {
    return (
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8 text-center">
        <ArrowPathIcon className="h-12 w-12 mx-auto animate-spin text-primary-500" />
        <h2 className="mt-4 text-lg font-medium text-gray-900">Loading transformation data...</h2>
      </div>
    );
  }
    </div>
  );
}

  return (
    <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Transformation Analysis</h1>
        <p className="mt-2 text-gray-600">
          Analyze and create transformations between datasets
        </p>
      </div>
      
      {/* LLM Provider Indicator */}
      {llmProvider === 'openai' && (
        <div className="mb-6 p-4 bg-blue-50 rounded-lg">
          <div className="flex items-center">
            <InformationCircleIcon className="h-5 w-5 text-blue-500 mr-2" />
            <p className="text-sm text-blue-800">
              Using <span className="font-semibold">OpenAI</span> as your LLM provider. Your API key will be used for generating transformations.
              <span className="ml-2">
                <button onClick={() => navigate('/settings?tab=api')} className="text-primary-600 underline hover:text-primary-500">Manage API settings</button>
              </span>
            </p>
          </div>
        </div>
      )}
    
    {/* Datasets Summary */}
    <div className="grid grid-cols-1 gap-8 md:grid-cols-2 mb-10">
      <div className="card">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Source Dataset: {sourceDataset.name}</h2>
        <div className="mt-4">
          <dl className="grid grid-cols-1 gap-4 sm:grid-cols-2">
            <div className="sm:col-span-1">
              <dt className="text-sm font-medium text-gray-500">Rows</dt>
              <dd className="mt-1 text-sm font-medium text-gray-900">{sourceDataset.rows}</dd>
            </div>
            <div className="sm:col-span-1">
              <dt className="text-sm font-medium text-gray-500">Columns</dt>
              <dd className="mt-1 text-sm font-medium text-gray-900">{sourceDataset.columns}</dd>
            </div>
            <div className="sm:col-span-2">
              <dt className="text-sm font-medium text-gray-500">Column Names</dt>
              <dd className="mt-1 text-sm text-gray-900">
                <div className="flex flex-wrap gap-2">
                  {sourceDataset.columnNames?.map((col, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                    >
                      {col}
                    </span>
                  ))}
                </div>
              </dd>
            </div>
          </dl>
            <dl className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Rows</dt>
                <dd className="mt-1 text-sm font-medium text-gray-900">{sourceDataset.rows}</dd>
              </div>
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Columns</dt>
                <dd className="mt-1 text-sm font-medium text-gray-900">{sourceDataset.columns}</dd>
              </div>
              <div className="sm:col-span-2">
                <dt className="text-sm font-medium text-gray-500">Column Names</dt>
                <dd className="mt-1 text-sm text-gray-900">
                  <div className="flex flex-wrap gap-2">
                    {sourceDataset.columnNames?.map((col, index) => (
                      <span
                        key={index}
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                      >
                        {col}
                      </span>
                    ))}
                  </div>
                </dd>
              </div>
            </dl>
          </div>
        </div>
        
        <div className="card">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Target Dataset: {targetDataset.name}</h2>
          <div className="mt-4">
            <dl className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Rows</dt>
                <dd className="mt-1 text-sm font-medium text-gray-900">{targetDataset.rows}</dd>
              </div>
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Columns</dt>
                <dd className="mt-1 text-sm font-medium text-gray-900">{targetDataset.columns}</dd>
              </div>
              <div className="sm:col-span-2">
                <dt className="text-sm font-medium text-gray-500">Column Names</dt>
                <dd className="mt-1 text-sm text-gray-900">
                  <div className="flex flex-wrap gap-2">
                    {targetDataset.columnNames?.map((col, index) => (
                      <span
                        key={index}
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                      >
                        {col}
                      </span>
                    ))}
                  </div>
                </dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
      
      {/* Sample Row Pairs */}
      <div className="mb-10">
        <h2 className="text-xl font-semibold text-gray-900 mb-6">Sample Row Pairs</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-300">
            <thead>
              <tr>
                <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                  #
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  Source Row
                </th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                  Target Row
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 bg-white">
              {samplePairs.map((pair, index) => (
                <tr key={index}>
                  <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                    {index + 1}
                  </td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <pre className="bg-gray-50 p-2 rounded-md overflow-x-auto">
                      {JSON.stringify(pair.source, null, 2)}
                    </pre>
                  </td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <pre className="bg-gray-50 p-2 rounded-md overflow-x-auto">
                      {JSON.stringify(pair.target, null, 2)}
                    </pre>
                  </td>
                </tr>
              ))}
            </div>
          </div>
          
          {/* Transformation Function */}
          <div className="mb-10">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900">Transformation Function</h2>
              <button
                onClick={handleGenerateFunction}
                disabled={isFunctionLoading || !transformationType}
                className={`btn-secondary ${(!transformationType || isFunctionLoading) && 'opacity-50 cursor-not-allowed'}`}
              >
                {isFunctionLoading ? (
                  <>
                    <ArrowPathIcon className="h-4 w-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <CodeBracketIcon className="h-4 w-4 mr-2" />
                    Generate Function
                  </>
                )}
              </button>
            </div>
            
            <div className="bg-white shadow-sm rounded-lg overflow-hidden">
              <div className="border rounded-lg h-64">
                <Editor
                  height="100%"
                  defaultLanguage="javascript"
                  value={transformationFunction}
                  onChange={handleEditorChange}
                  theme="vs-light"
                  options={{
                    minimap: { enabled: false },
                    scrollBeyondLastLine: false,
                    automaticLayout: true,
                  }}
                />
              </div>
            </div>
            
            {/* Explanation */}
            {explanation && (
              <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                <h3 className="text-md font-medium text-gray-900 mb-2">Explanation:</h3>
                <p className="text-sm text-gray-700">{explanation}</p>
              </div>
            className="btn-secondary"
          >
            {isTypeLoading ? (
              <>
                <ArrowPathIcon className="h-4 w-4 mr-2 animate-spin" />
                Classifying...
              </>
            ) : (
              <>
                <DocumentMagnifyingGlassIcon className="h-4 w-4 mr-2" />
                Auto-Classify
              </>
            )}
          </button>
        </div>
        
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
          {transformationTypes.map((type) => (
            <div
              key={type.id}
              onClick={() => setTransformationType(type.id)}
              className={`cursor-pointer rounded-lg border p-4 transition-all ${
                transformationType === type.id
                  ? 'border-primary-500 bg-primary-50 ring-2 ring-primary-500'
                  : 'border-gray-200 hover:border-primary-300 hover:bg-primary-50'
              }`}
            >
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="text-base font-medium text-gray-900">{type.name}</h3>
                  <p className="mt-1 text-sm text-gray-500">{type.description}</p>
                </div>
                {transformationType === type.id && (
                  <CheckCircleIcon className="h-5 w-5 text-primary-500" />
                )}
              </div>
            className={`btn-secondary ${(!transformationType || isFunctionLoading) && 'opacity-50 cursor-not-allowed'}`}
          >
            {isFunctionLoading ? (
              <>
                <ArrowPathIcon className="h-4 w-4 mr-2 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <CodeBracketIcon className="h-4 w-4 mr-2" />
                Generate Function
              </>
            )}
          </button>
        </div>
        
        <div className="bg-white shadow-sm rounded-lg overflow-hidden">
          <div className="border rounded-lg h-64">
            <Editor
              height="100%"
              defaultLanguage="javascript"
              value={transformationFunction}
              onChange={handleEditorChange}
              theme="vs-light"
              options={{
                minimap: { enabled: false },
                scrollBeyondLastLine: false,
                automaticLayout: true,
              }}
            />
          </div>
        </div>
        
        {/* Explanation */}
        {explanation && (
          <div className="mt-4 p-4 bg-gray-50 rounded-lg">
            <h3 className="text-md font-medium text-gray-900 mb-2">Explanation:</h3>
            <p className="text-sm text-gray-700">{explanation}</p>
          </div>
        )}
        
        {/* Loading explanation */}
        {isExplanationLoading && (
          <div className="mt-4 p-4 bg-gray-50 rounded-lg">
            <div className="flex items-center">
              <ArrowPathIcon className="h-4 w-4 mr-2 animate-spin text-gray-500" />
              <span className="text-sm text-gray-500">Generating explanation...</span>
            </div>
          </div>
        )}
        
        {/* Explain button */}
        {transformationFunction && !explanation && !isExplanationLoading && (
          <button
            onClick={() => handleExplainFunction()}
            className="mt-4 text-sm text-primary-600 hover:text-primary-500"
          >
            Explain this transformation
          </button>
        )}
        
        {/* Pre-built Transformations Section */}
        <div className="mt-6 border-t border-gray-200 pt-6">
          <div className="flex items-center">
            <LightBulbIcon className="h-5 w-5 text-yellow-500 mr-2" />
            <h3 className="text-lg font-medium text-gray-900">Need a reliable transformation?</h3>
          </div>
          <p className="mt-1 text-sm text-gray-500">
            If the generated transformation isn't working well, try one of these pre-built options for common scenarios:
          </p>
          <PrebuiltTransformations onSelect={handleSelectPrebuiltTransformation} />
        </div>
      </div>
      
      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row sm:justify-between">
        <button
          onClick={handleSaveTransformation}
          disabled={saving || !transformationType || !transformationFunction}
          className={`btn-primary mb-4 sm:mb-0 ${
            (saving || !transformationType || !transformationFunction) && 'opacity-50 cursor-not-allowed'
          }`}
        >
          {saving ? 'Saving...' : transformation ? 'Update Transformation' : 'Save Transformation'}
        </button>
        
        <button
          onClick={handleApplyTransformation}
          disabled={!transformation || !transformation._id}
          className={`btn-secondary ${(!transformation || !transformation._id) && 'opacity-50 cursor-not-allowed'}`}
        >
          <PlayIcon className="h-4 w-4 mr-2" />
          Apply Transformation to New Data
        </button>
      </div>
    </div>
  );
};

export default TransformationAnalysis;
